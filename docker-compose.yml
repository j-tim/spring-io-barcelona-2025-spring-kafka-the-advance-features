services:

  # https://hub.docker.com/r/confluentinc/cp-kafka
  broker:
    image: confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION}
    hostname: broker
    container_name: broker
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 5s
      retries: 10
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_PLATFORM_VERSION}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    healthcheck:
      interval: 5s
      retries: 10
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8081
    environment:
      # Validate default values in Avro. This will avoid Avro Schemas with invalid default value will be registered
      SCHEMA_REGISTRY_SCHEMA_PROVIDERS_AVRO_VALIDATE_DEFAULTS: true
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # https://hub.docker.com/_/postgres
  postgresql:
    image: postgres:14
    hostname: postgresql
    container_name: postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: "conduktor-console"
      POSTGRES_USER: "conduktor"
      POSTGRES_PASSWORD: "change_me"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"

  # Conduktor Console, the enterprise UI.
  # It depends on PostgreSQL. Here, we depend on Redpanda only for our get-started.
  # https://docs.conduktor.io/platform/get-started/configuration/introduction/
  conduktor-console:
    image: conduktor/conduktor-console:${CONDUKTOR_VERSION}
    container_name: conduktor-console
    ports:
      - "80:80"
    volumes:
      - conduktor_data:/var/conduktor
    environment:
      CDK_DATABASE_URL: "postgresql://conduktor:change_me@postgresql:5432/conduktor-console"
      CDK_ORGANIZATION_NAME: demo
      CDK_LISTENING_PORT: 80
      CDK_ADMIN_EMAIL: "admin@conduktor.io"
      CDK_ADMIN_PASSWORD: "adminP4ss!"
      CDK_CLUSTERS_0_ID: "default"
      CDK_CLUSTERS_0_NAME: "My Local Kafka Cluster"
      CDK_CLUSTERS_0_COLOR: "#0013E7"
      CDK_CLUSTERS_0_BOOTSTRAPSERVERS: "PLAINTEXT://broker:29092"
      CDK_CLUSTERS_0_SCHEMAREGISTRY_URL: "http://schema-registry:8081"
      CDK_MONITORING_CORTEX-URL: http://conduktor-monitoring:9009/
      CDK_MONITORING_ALERT-MANAGER-URL: http://conduktor-monitoring:9010/
      CDK_MONITORING_CALLBACK-URL: http://conduktor-console:80/monitoring/api/
      CDK_MONITORING_NOTIFICATIONS-CALLBACK-URL: http://localhost:80
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      postgresql:
        condition: service_healthy

  conduktor-monitoring:
    image: conduktor/conduktor-console-cortex:${CONDUKTOR_VERSION}
    container_name: conduktor-monitoring
    environment:
      CDK_CONSOLE-URL: "http://conduktor-console:80"

  loki:
    image: grafana/loki:3.4.3
    container_name: loki
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:3100/ready | grep -q -w ready || exit 1
      interval: 5s
      timeout: 1s
      retries: 10
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki/local-config.yaml:/etc/loki/local-config.yaml

  grafana:
    image: grafana/grafana:11.6.1
    container_name: grafana
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 10
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/provisioning/datasources/grafana-datasource.yml:/etc/grafana/provisioning/datasources/grafana-datasource.yml
      - ./observability/grafana/provisioning/dashboards/grafana-dashboard.yml:/etc/grafana/provisioning/dashboards/grafana-dashboard.yml
      - ./observability/grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:v3.3.1
    container_name: prometheus
    restart: on-failure
    # https://prometheus.io/docs/prometheus/latest/storage/#remote-storage-integrations
    command:
      # See feature flags: https://prometheus.io/docs/prometheus/latest/feature_flags/
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 10
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  tempo:
    image: grafana/tempo:2.7.2
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yml" ]
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3200/api/echo || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 10
    ports:
      - "3200:3200"   # tempo
      - "4318:4318"   # otlp http
      - "4317:4317"   # otlp grpc
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo.yml:ro

volumes:
  pg_data: {}
  conduktor_data: {}

